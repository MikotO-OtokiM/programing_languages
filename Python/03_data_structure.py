################################################################################
# リスト
"""
    [] 内に指定した要素を含むリストとなる
    要素を追加したり削除したりできる（変更可能）
    文字列と同様にインデックス、スライスの指定で要素を取得する
"""
l = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
n = [1, 2, 3, 4, 5, 6, 7]

# ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print(l)
# [1, 2, 3, 4, 5, 6, 7]
print(n)

# リスト操作
# 先頭の要素を X へ変更 ['X', 'b', 'c', 'd', 'e', 'f', 'g']
l[0] = 'X'
print(l)

# 3番目から5番目を C、D、Eへ変更 ['X', 'b', 'C', 'D', 'E', 'f', 'g']
l[2:5] = ['C', 'D', 'E']
print(l)

# 3番目から5番目を 空 へ変更 ['X', 'b', 'f', 'g']
l[2:5] = []
print(l)

 # 全ての要素を 空 に変更 []
l[:] = []
print(l)

# 末尾に 100 を追加 [1, 2, 3, 4, 5, 6, 7, 100]　★extend との違いに注意★
n.append(100)
print(n)

# 先頭に 50 を追加 [50, 1, 2, 3, 4, 5, 6, 7, 100]
n.insert(0, 50)
print(n)

# 末尾の要素をpop（取得して取り除く）（100）
# [50, 1, 2, 3, 4, 5, 6, 7]
print(n.pop())
print(n)

# 先頭の要素をpop（取得して取り除く）（50）
# [1, 2, 3, 4, 5, 6, 7]
print(n.pop(0))
print(n)

# 先頭の要素を削除する
# [2, 3, 4, 5, 6, 7]
del n[0]
print(n)

# 先頭から 4 を探し、削除する。（4が複数ある場合は最初に見つかった要素のみが削除）
# [2, 3, 5, 6, 7]
n.remove(4)
print(n)


# リストのメソッド例
l = [1, 2, 3, 4, 5, 1, 2, 3]

# 3 が最初に登場するインデックスの場所（2）
print(l.index(3))

# 第二引数（3）より後ろで、最初に 3 が登場するインデックスの場所（7）
print(l.index(3, 3))

# リストに含まれる 3 の数（2）
print(l.count(3))

# 要素を昇順でソート
# [1, 1, 2, 2, 3, 3, 4, 5]
l.sort()
print(l)

# 要素を降順でソート
# [5, 4, 3, 3, 2, 2, 1, 1]
l.sort(reverse=True)
print(l)

# 要素を逆順でソート 降順ではなく、現リストの逆順になる（sort(reverse=True) と違う）
# [1, 1, 2, 2, 3, 3, 4, 5]
l.reverse()
print(l)

# リストのコピー　【注意】y = l とすると、参照渡しになる
# [1, 1, 2, 2, 3, 3, 4, 5]
y = l.copy()
print(y)

# リストの結合
l2 = [6, 7, 8, 9, 10]
l.extend(l2)
print(l)
# [1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]
# 上記を l.append(l2) とすると
# [1, 1, 2, 2, 3, 3, 4, 5, [6, 7, 8, 9, 10]] のように入れ子になる

s = 'My name is Mike.'

# 引数に指定した文字で、文字列を分割しリストにする
# ['My', 'name', 'is', 'Mike.']
to_split = s.split(' ')
print(to_split)

# 指定した文字列でリストを結合し一つの文字列にする
# My name is Mike.
x = ' '.join(to_split)
print(x)


################################################################################
# タプル
"""
    () 内に指定した要素を含むタプルとなる
    　※要素が1つの場合、末尾にカンマを書かないとタプル型にならない
    () を記載せず、カンマ区切りで要素を指定した場合もタプルとして扱われる
    要素を追加したり削除したりできない（変更不可）
    ただし、タプルの要素としてリストを指定した場合、そのリストの要素変更は可能
    文字列と同様にインデックス、スライスの指定で要素を取得する
    要素の変更以外のリストの同様のメソッドが利用できる
"""
# t = 1, 2, 3, 4, 5　と宣言しても同じ
t = (1, 2, 3, 4, 5)

# エラーになる。タプル要素の変更不可。
# t[0] = 2

t = ([1, 2, 3],[4, 5, 6])
# ([1, 2, 3], [4, 5, 6])
print(t)

# エラーにはならない。タプル要素であるリストは変更可能
# ([7, 2, 3], [4, 5, 6])
t[0][0] = 7
print(t)


# タプルのアンパック
# (10, 20)
num_tuple = (10, 20)
print(num_tuple)

# タプルの要素が指定した変数にアンパックされる
# 10
# 20
x, y = num_tuple
print(x)
print(y)

# タプルのアンパックを利用した値の入れ替え
# 100 200
a = 100
b = 200
print(a, b)

# 右辺がタプルとして処理され、その要素を左辺の a と b にアンパックしている
# 200 100
a, b = b, a
print(a, b)


################################################################################
# 辞書型（dict型）
"""
    {} 内にキーと値のペアを : を用いて指定する。
"""
d = {'x': 10, 'y': 20}
# {'x': 10, 'y': 20}
print(d)

# キーを指定して値を取り出す（10）
print(d['x'])

# 存在しないキーを指定すると KeyError となる
# print(d['xxx'])

# 指定したキーの値を変更する
# 1000
d['x'] = 1000
print(d['x'])

# 新しい要素を追加する
# {'x': 1000, 'y': 20, 1: 'XXXX'}
d[1] = 'XXXX'
print(d)


#　辞書型のメソッド例
# キーを取得する（dict_keys(['x', 'y', 1])）
print(d.keys())

# 値を取得する（dict_values([1000, 20, 'XXXX'])）
print(d.values())

d2 = {'x': 1000, 'z': 1}
# 辞書を更新する（既にあるキーは値が更新され、無いキーは要素が追加となる）
# {'x': 1000, 'y': 20, 1: 'XXXX', 'z': 1}
d.update(d2)
print(d)

# getでも値を取得可能
print(d.get('x'))

# 存在しないキーを指定すると None が返ってくる（エラーにはならない）
print(d.get('xxx'))

# 該当のキーが辞書に存在するか確認（True）
print('x' in d)

# 辞書のコピー　【注意】d3 = d とすると、参照渡しになる
# {'x': 1000, 'y': 20, 1: 'XXXX', 'z': 1}
d3 = d.copy()
print(d3)


################################################################################
# 集合型（set型）
"""
    {} 内に要素を指定。重複を除いた要素の集合となる
    リストやタプルと違い、順番（index）がない
"""
a = {1, 2, 2, 3, 4, 5, 5, 6}
# {1, 2, 3, 4, 5, 6}
print(a)

b = {2, 3, 6, 7}
# {2, 3, 6, 7}
print(b)

# a の集合から b の集合を除いたもの　{1, 4, 5}
print(a - b)

# a、b の両方に存在する要素の集合　{2, 3, 6}
print(a & b)

# a または b に存在する要素の集合　{1, 2, 3, 4, 5, 6, 7}
print(a | b)

# a と b の排他集合（どちらかにしか含まれない要素）　{1, 4, 5, 7}
print(a ^ b)


# 集合型のメソッド例
# 要素の追加
# {1, 2, 3, 4, 5, 6, 10}
a.add(10)
print(a)

# 要素の削除
# {1, 2, 3, 4, 5, 6}
a.remove(10)
print(a)


# リストから集合への型変換
l = ['apple', 'banana', 'apple', 'banana']
# ['apple', 'banana', 'apple', 'banana']
print(l)

# set で集合型へ変換する
# {'banana', 'apple'}
kind = set(l)
print(kind)


################################################################################
# リスト内包表記
# リストを簡潔に高速に生成する方法
# 通常のリスト生成
l = []
for i in range(5):
    l.append(i)
print(l)
# [0, 1, 2, 3, 4]

# リスト内包表記でのリスト生成
l = [i for i in range(5)]
print(l)
# [0, 1, 2, 3, 4]

# if 文で条件を指定可能
l = [i for i in range(5) if i % 2 == 0]
print(l)
# [0, 2, 4]


################################################################################
# タプル内包表記
# タプルを簡潔に高速に生成する方法
# 通常のタプル生成
t = (0, 1, 2, 3, 4)
print(t)
# (0, 1, 2, 3, 4)

# タプル内包表記でのタプル生成
# ※注意※ tuple を付けないとジェネレーターの内包表記となってしまう
ｔ = tuple(i for i in range(5))
print(t)
# (0, 1, 2, 3, 4)

# if 文で条件を指定可能
ｔ = tuple(i for i in range(5) if i % 2 == 0)
print(t)
# (0, 2, 4)


################################################################################
# 辞書内包表記
# 辞書を簡潔に高速に生成する方法
# 通常の辞書生成
w = ['mon', 'tue', 'wed']
f = ['coffee', 'milk', 'water']

d = {}
for x, y in zip(w, f):
    d[x] = y
print(d)
# {'mon': 'coffee', 'tue': 'milk', 'wed': 'water'}

# 辞書内包表記での辞書生成
d = {x: y for x, y in zip(w, f)}
print(d)
# {'mon': 'coffee', 'tue': 'milk', 'wed': 'water'}


################################################################################
# 集合内包表記
# 集合を簡潔に高速に生成する方法
# 通常の集合生成
s = set()
for i in range(5):
    s.add(i)
print(s)
# {0, 1, 2, 3, 4}

# リスト内包表記での集合生成
s = {i for i in range(5)}
print(s)
# {0, 1, 2, 3, 4}

# if 文で条件を指定可能
s = {i for i in range(5) if i % 2 == 0}
print(s)
# {0, 2, 4}